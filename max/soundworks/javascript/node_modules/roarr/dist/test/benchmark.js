"use strict";
/* eslint-disable no-console */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const benchmark_1 = require("benchmark");
const globalthis_1 = __importDefault(require("globalthis"));
const Roarr_1 = require("../src/Roarr");
// eslint-disable-next-line node/no-process-env
if (process.env.ROARR_LOG !== 'true') {
    throw new Error('Must run benchmark with ROARR_LOG=true.');
}
const globalThis = (0, globalthis_1.default)();
(() => {
    const suite = new benchmark_1.Suite('roarr', {
        onCycle: (event) => {
            console.log(String(event.target));
        },
        onError: (event) => {
            console.error(event.target.error);
        },
    });
    suite.add('simple message', () => {
        Roarr_1.Roarr.info('foo');
    }, {
        setup: () => {
            globalThis.ROARR.write = () => {
                return undefined;
            };
        },
    });
    suite.add('message with printf', () => {
        Roarr_1.Roarr.info('foo %s %s %s', 'bar', 'baz', 'qux');
    }, {
        setup: () => {
            globalThis.ROARR.write = () => {
                return undefined;
            };
        },
    });
    suite.add('message with context', () => {
        Roarr_1.Roarr.info({
            foo: 'bar',
        }, 'foo');
    }, {
        setup: () => {
            globalThis.ROARR.write = () => {
                return undefined;
            };
        },
    });
    let largeContext;
    suite.add('message with large context', () => {
        Roarr_1.Roarr.info(largeContext, 'foo');
    }, {
        setup: () => {
            globalThis.ROARR.write = () => {
                return undefined;
            };
            largeContext = {};
            let size = 10000;
            while (size--) {
                largeContext[Math.random()] = Math.random();
            }
        },
    });
    let largeContextWithCircularReference;
    suite.add('message with large context', () => {
        Roarr_1.Roarr.info(largeContextWithCircularReference, 'foo');
    }, {
        setup: () => {
            globalThis.ROARR.write = () => {
                return undefined;
            };
            largeContextWithCircularReference = {};
            let size = 10000;
            while (size--) {
                largeContextWithCircularReference[Math.random()] = Math.random();
            }
            const foo = {};
            foo.foo = foo;
            largeContextWithCircularReference.foo = foo;
        },
    });
    suite.run();
})();
