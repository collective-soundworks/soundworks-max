"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _columnify = _interopRequireDefault(require("columnify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 */
const logger = {
  title(msg) {
    console.log(_chalk.default.cyan(`+ ${msg}`));
  },

  clientConfigAndRouting(routes, config) {
    const clientsConfig = config.app.clients;
    const serverIp = config.env.serverIp;
    const auth = config.env.auth;
    const table = [];

    for (let clientType in clientsConfig) {
      const client = clientsConfig[clientType];

      if (client.target === 'node') {
        const line = {
          client_type: `> ${clientType}`,
          target: _chalk.default.red(client.target),
          path: `server ip: ${_chalk.default.green(serverIp)}`,
          default: undefined,
          auth: undefined
        };
        table.push(line);
      } else if (client.target === 'browser') {
        const line = {
          client_type: `> ${clientType}`,
          target: _chalk.default.red(client.target),
          path: routes.find(r => r.clientType === clientType) ? _chalk.default.green(routes.find(r => r.clientType === clientType).path) : _chalk.default.red('no route defined'),
          default: client.default ? 'x' : undefined,
          auth: auth && auth.clients.indexOf(clientType) !== -1 ? 'x' : undefined
        };
        table.push(line);
      } else {
        console.log(`@warning: no target defined for client ${clientType}`);
      }
    }

    console.log(``);
    console.log((0, _columnify.default)(table, {
      showHeaders: true,
      minWidth: 6,
      columnSplitter: ' | ',
      config: {
        default: {
          align: 'center'
        },
        auth: {
          align: 'center'
        }
      }
    }));
    console.log(``); // check if a route is defined but not in config

    const configClientTypes = Object.keys(clientsConfig);
    routes.forEach(r => {
      if (configClientTypes.indexOf(r.clientType) === -1) {
        console.log(`@warning: no client config found for route ${r.clientType}`);
      }
    });
  },

  ip(protocol, address, port) {
    console.log(`    ${protocol}://${address}:${_chalk.default.green(port)}`);
  },

  pluginStart(name) {
    console.log(`    ${name} ${_chalk.default.yellow('start...')}`);
  },

  pluginStarted(name) {
    console.log(`    ${name} ${_chalk.default.cyan('started')}`);
  },

  pluginReady(name) {
    console.log(`    ${name} ${_chalk.default.green('ready')}`);
  },

  pluginErrored(name) {
    console.log(`    ${name} ${_chalk.default.red('errors')}`);
  }

};
var _default = logger;
exports.default = _default;